name: Build WAR

on: 
  push:
    branches: 
      - master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    - name: copy WAR to root/
      run: cp target/*.war ./ROOT.war
      
    - name: Create Release
      if: contains(github.ref, 'release')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: master
        release_name: master
        draft: false
        prerelease: true
    - name: Upload Release Asset
      if: contains(github.ref, 'release')
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./ROOT.war
        asset_name: ROOT.war
        asset_content_type: application/zip
        
    - name: Make docker
      run: |
        cp schemas/api.yaml swagger-dist/api.yaml
        docker build -t majortwip/escapeconnect:latest .
        echo "${{ secrets.DOCKER_USERNAME }}" | docker login -u "${{ secrets.DOCKER_PASSWORD }}" --password-stdin
        docker push majortwip/escapeconnect
  buildARM:
    runs-on: [ubuntu-18.04]
    name: Buld for Arm32v7
    steps:
          - uses: actions/checkout@v1.0.0
          - uses: uraimo/run-on-arch-action@v1.0.5
            id: runcmd
            with:
              architecture: armv7
              distribution: ubuntu18.04
              run: |
                uname -a
                echo ::set-output name=uname::$(uname -a)
          - name: Get the output
            run: |
                echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
